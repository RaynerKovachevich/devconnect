openapi: 3.1.0
info:
  title: DevConnect API
  version: 1.0.0
  description: |
    REST API for the DevConnect platform. Provides user authentication and user management endpoints.
servers:
  - url: http://localhost:5000
    description: Local development server
tags:
  - name: Auth
    description: Authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Health
    description: Service status endpoints
paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      description: Returns API status to confirm the service is running.
      responses:
        '200':
          description: Service is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /auth/login:
    post:
      tags: [Auth]
      summary: Authenticate a user
      description: Validates user credentials and returns a JWT for authenticated sessions.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Missing required credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid email or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      description: Creates a user account, hashes the password, and returns a JWT for immediate authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterRequest'
      responses:
        '201':
          description: Registration successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Missing required fields or invalid payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    get:
      tags: [Users]
      summary: List users
      description: Returns all users with sensitive fields removed.
      responses:
        '200':
          description: Array of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPublic'
    post:
      tags: [Users]
      summary: Create a user
      description: Creates a new user and hashes the password before storing it.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [Users]
      summary: Get a user by ID
      responses:
        '200':
          description: The requested user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Users]
      summary: Update a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Updated user record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Users]
      summary: Delete a user
      description: Removes a user account. Requires admin role.
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted successfully.
        '401':
          description: Missing or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: User does not have permission to delete accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/me:
    get:
      tags: [Users]
      summary: Get the authenticated user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authenticated user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        '401':
          description: Missing or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    UserId:
      name: id
      in: path
      required: true
      description: Numeric ID of the user.
      schema:
        type: integer
        format: int32
        minimum: 1
  schemas:
    UserPublic:
      type: object
      description: User data returned to clients. Password is omitted.
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          nullable: true
          example: Jane Doe
        email:
          type: string
          format: email
          example: jane@example.com
        role:
          type: string
          enum: [user, admin]
          example: user
        createdAt:
          type: string
          format: date-time
          example: 2025-10-21T15:03:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-10-21T15:10:00Z
      required:
        - id
        - email
        - role
        - createdAt
        - updatedAt
    UserCreateRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          enum: [user, admin]
      additionalProperties: false
    AuthLoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    AuthRegisterRequest:
      allOf:
        - $ref: '#/components/schemas/UserCreateRequest'
        - type: object
          properties:
            name:
              type: string
              nullable: true
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: '#/components/schemas/UserPublic'
      required:
        - token
        - user
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
